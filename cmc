#!/usr/bin/perl
use strict;
use warnings;

use UI::Dialog;
use Term::ReadKey;
use Term::ANSIScreen qw(cls);

my $FileEditor = "/bin/nano";
my $InitDName = "/home/cmowner/bin/coffeemud";
my $COFFEEMUDDIR = "/home/cmowner/CoffeeMud";
my $BackupCommand = "/home/cmowner/CoffeeBackup/coffeebackup.pl";
my $MUDLog = "/home/cmowner/CoffeeMud/mud.log";
my $Pager = "/usr/bin/less";
my $CMCDir = "/home/cmowner/CoffeemudManagementConsole";
my $BackupToolDir = "/home/cmowner/CoffeeBackup";
my $StartupDir = "/home/cmowner/CoffeeStartup";
my $UpdateCommand = "/usr/bin/git pull";
my $BinDir = "/home/cmowner/bin";
my $DEBUG_MODE = "off";
my $MUDPORT = "5555";

###################################################
# No changes below here
###################################################

my $CMC_ver = "1.6.3";
my $Record = "false";	# Are results saved?
my $TempDir = "/tmp";
my $RobotName = "";
my $BotVersion = "";
my $UserName = "";
my $ServerStatus = "foo";

sub PrintDebugCommand
{
	if ($DEBUG_MODE eq "off")
	{
		return;
	}
	my $PassedString = shift;
	print "About to run:\n$PassedString\n";
	print "Press Enter To Run This:";
	my $entered = <STDIN>;
}

my $d = new UI::Dialog ( backtitle => "CoffeeMUD Management Console v$CMC_ver", height => 20, width => 65, listheight => 5,
	order => [ 'ascii', 'cdialog', 'xdialog' ]);

my $windowtitle = "Welcome to the CoffeeMUD Management Console!";
my $enjoyedtitle = "We hope you enjoyed CMC!";
my $introtext =
"This is the CoffeeMUD Management Console, a utility for CoffeeMUD operators
to manage their servers from a text GUI rather than the command line.";

$d->msgbox( title => $windowtitle, text => $introtext );

if (($d->state() eq "ESC") || ($d->state() eq "CANCEL"))
{
	exit 0;
}

my $menuselection = "";

sub CheckServerStatus
{
	my $running=`ps ax|grep coffee_mud|grep -v grep`;
	if ($running ne "")
	{
		$ServerStatus = "Running";
	}
	else
	{
		$ServerStatus = "Stopped";
	}

}

sub DoUpdate
{
	my $DesiredDir = $_[0];

	# Update desired utility
	chdir ($DesiredDir);
	PrintDebugCommand("Running $UpdateCommand in $DesiredDir\n");
	system("$UpdateCommand");
	print "Press Enter To Continue";
	my $entered = <STDIN>;
}

sub UpdateToolsMenu
{
	my $WantRespawn="ON";
	CheckServerStatus();
	if (-f "$COFFEEMUDDIR/nostart")
	{
		$WantRespawn="OFF";
	}
	$menuselection = $d->menu( title => "Update Tools Menu", text => "Server is $ServerStatus and respawn is $WantRespawn - Select one:",
                            list => [ '1', 'Update CMC',
                                      '2', 'Update Backup',
                                      '3', 'Update Startup',
                                      'q', 'Main Menu' ] );
}

sub UpdateTools
{
	while (-1)
	{
		UpdateToolsMenu();
		if (($menuselection eq "CANCEL") || ($menuselection eq "ESC") || ($menuselection eq "") || ($menuselection eq "q") || ($menuselection eq "Q"))
		{
			return;
		}
		elsif ($menuselection eq "1")
		{
			# Update CMC
			DoUpdate($CMCDir);
		}
		elsif ($menuselection eq "2")
		{
			# Update BackupToolDir
			DoUpdate($BackupToolDir);
		}
		elsif ($menuselection eq "3")
		{
			# Update Startup
			DoUpdate($StartupDir);
			if (! -d $BinDir)
			{
				print "Binary dir $BinDir not found, creating...\n";
				system("mkdir -p $BinDir");
			}
			system("cp $StartupDir/coffeemud $BinDir");
			system("cp $StartupDir/startcoffeemud $COFFEEMUDDIR");
			system("cp $StartupDir/InstallUNIX-auto.sh $COFFEEMUDDIR");
		}
	}
}

sub MainMenu
{
	my $WantRespawn="ON";
	CheckServerStatus();
	if (-f "$COFFEEMUDDIR/nostart")
	{
		$WantRespawn="OFF";
	}

	$menuselection = $d->menu( title => "Main Menu", text => "Server is $ServerStatus and respawn is $WantRespawn - Select one:",
                            list => [ '1', 'Start Watchdog',
                                      '2', 'Stop Watchdog',
                                      '3', 'Server Console',
                                      '4', 'Turn Off Respawn',
                                      '5', 'Turn Respawn On',
                                      '6', 'Edit mudUNIX.sh',
                                      '7', 'Edit coffeemud.ini',
                                      '8', 'Backup MUD',
                                      '9', 'View MUD Log',
                                      '10', 'Kill MUD Process',
                                      '11', 'Edit intro.txt',
                                      '12', 'Update Utils',
                                      '13', 'Update CM',
                                      '14', 'Connect MUD',
                                      'q', 'Quit CMC' ] );
}

while (-1)
{
	MainMenu();
	if (($menuselection eq "CANCEL") || ($menuselection eq "ESC") || ($menuselection eq "") || ($menuselection eq "q") || ($menuselection eq "Q"))
	{
		$d->msgbox( title => $enjoyedtitle, text => "Thanks for using CMC..." );
		exit 0;
	}
	if ($menuselection eq "1")
	{
                if ($d->yesno( text => "Confirm starting the server watchdog", text => "Are you sure you want to start the server watchdog? You should likely use option #10 instead..." ))
                {
                        system("$InitDName start");
                        sleep(10);
                }
	}
	elsif ($menuselection eq "2")
	{
		if ($d->yesno( text => "Confirm stopping the server watchdog", text => "Are you sure you want to shut down the server watchdog?" ))
		{
			system("$InitDName stop");
			sleep(5);
		}
	}
	elsif ($menuselection eq "3")
	{
		$d->msgbox( text => "To exit the CoffeeMUD console and return to CMC press CTRL-A CTRL-D" );
		system("screen -r Coffeemud");
	}
	elsif ($menuselection eq "4")
	{
		# Turn off respawn
		system("touch $COFFEEMUDDIR/nostart");
	}
	elsif ($menuselection eq "5")
	{
		# Turn respawn back on
		if (-f "$COFFEEMUDDIR/nostart")
		{
			unlink("$COFFEEMUDDIR/nostart");
		}
	}
	elsif ($menuselection eq "6")
	{
		# Edit mudUNIX.sh file
		system("$FileEditor $COFFEEMUDDIR/mudUNIX.sh");
	}
	elsif ($menuselection eq "7")
	{
		# Edit coffeemud.ini file
		system("$FileEditor $COFFEEMUDDIR/coffeemud.ini");
	}
	elsif ($menuselection eq "8")
	{
                # Run a backup
                system("clear");
                system("$BackupCommand");
                print "Press Enter To Continue";
                my $entered = <STDIN>;
	}
	elsif ($menuselection eq "9")
	{
                # View the log file
                system("$Pager $MUDLog");
	}
	elsif ($menuselection eq "10")
	{
		my $running=`ps ax|grep coffee_mud|grep -v grep`;
	        if ($running ne "")
		{
			# Process is running, kill it
			system("killall java");
			sleep(5);
		}
	}
	elsif ($menuselection eq "11")
	{
		# Edit intro.txt file
		system("$FileEditor $COFFEEMUDDIR/resources/text/intro.txt");
	}
	elsif ($menuselection eq "12")
	{
		# Update Menu
		UpdateTools();
	}
	elsif ($menuselection eq "13")
	{
		# Rebuild CoffeeMud
		my $entered = "";
		chdir($COFFEEMUDDIR);
		system("touch $COFFEEMUDDIR/nostart");
		my $running=`ps ax|grep coffee_mud|grep -v grep`;
		if ($running ne "")
		{
			# Process is running, kill it
			print "Killing CoffeeMud process:\n";
			system("killall java");
			sleep(5);
		}
		system("cp coffeemud.ini coffeemud.ini-keep");
		system("git pull");
		print "Do you want to recompile CoffeeMud? (N/y): ";
		$entered = <STDIN>;
		if (($entered eq "y") || ($entered eq "Y"))
		{
			system("./InstallUNIX-auto.sh");
			system("cp coffeemud.ini-keep coffeemud.ini");
			print "Press Enter To Continue: ";
			$entered = <STDIN>;
		}
		unlink("$COFFEEMUDDIR/nostart");
	}
	elsif ($menuselection eq "14")
	{
		# Telnet to MUD
                system("clear");
		system("telnet localhost $MUDPORT");
		print "Press Enter To Continue: ";
		my $entered = <STDIN>;
	}

}

exit 0;
